/**
 * 对数据库进行封装，连接池版本的封装
 *
 * 因为因为习惯了 javaweb 的编写方法，so 这里使用 javaweb 的习惯来进行封装
 *
 * wdvjEIrafixcigeafudbIbeiScutcigdFIjcbIkdevbriScuxceIgacvfaFIfav.
 * */

/**
 * 这里主要有两个方法，这里给予一定的说明
 * 以下提及到的表名称，库名称，如果在 init 时有进行初始化，可以为空，标记为 [/]
 * init ： 初始化数据库连接池
 *          参数      名称              说明
 *                connectionParam  参数和 mysql.createPool 的参数是一致的，见https://github.com/mysqljs/mysql#escaping-query-values
 *                databaseName_    数据库名称
 *                tableName_       数据表名称
 * cdus ： 增删改查（其实这里给了八个函数）(其中包含了事务)
 *          setDefaultDatabaseName      设置默认的数据库
 *          setDefaultTableName         设置默认的表（仅仅适用我这里默认的查询）
 *          defaultDear                 默认的查询结果处理函数
 *              参数名称            说明
 *              err             query 查询参数的错误
 *              results         query 查询结果
 *              cb              回调函数，由用户编写，这里仅仅用来处理 results 的值，注意这里的前台交互应该写在回调中(就是这里没错)
 *              其中 cb 的格式为 function(results) { dear with results }
 *          defaultGetOneConnection     默认的获取连接的处理函数
 *              参数名称            说明
 *              tableName       数据表名称[/]
 *              databaseName    数据库名称[/]
 *              cb              回调函数，当成功获取到一个连接时触发
 *              其中 cb 的格式为 function(connection,tableName) {}
 *                  参数名称
 *                  connection  获取到的连接，注意这里的 connection 会自动释放，请不要销毁或释放
 *                  tableName   通过检查或默认的表名称，△这里当 defaultGetOneConnection 的 tableName[1] 不为空时，值为 tableName[1],为空是获取到默认的值
 *                      tip：这里的 tableName 默认值为执行 init 时赋予的，但是这里注意的是， tableName 可以根据需求赋予值为对象，数组等
 *          executeTransaction  默认的事务执行函数
 *              参数名称            说明
 *              sqlArr          数据库语句数组，这里默认为完整的 SQL 语句，例如 select * from table
 *              callback        回调函数
 *              databaseName    数据库名称
 *                  其中回调函数的格式为 function(err,results)
 *                          参数名称        说明
 *                          err         错误信息（无错误的时候为null）
 *                          results     执行完成函数的结果数组
 *                              格式为 results = {"data" : [[ret1],[ret2],[ret3]]}
 *                                  ret1~ret3 表示 3 条 sql 语句执行结束后的结果
 *          getAll                      默认的查询函数，将放回一个表中的所有内容
 *              参数名称            说明
 *              callback        回调函数，由用户编写
 *                  其中 callback 的格式为 function(results) { dear with result }
 *                  results 为执行 query 操作后的结果
 *              tableName       数据表名称[/]
 *              databaseName    数据库名称[/]
 *          insert                      默认的插入函数，需要提供全部表的字段
 *              参数名称            说明
 *              obj             将插入表的数据对象，必须是全部参数
 *                              例如表中的字段有 (name,age,sex) ，则插入的对象类似
 *                              { name : 'ibas' , age : 1 , sex : 'male' }
 *              callback        回调函数，由用户编写
 *                  其中 callback 的格式为 function(results) { dear with result }
 *                  results 为执行 query 操作后的结果
 *              tableName       数据表名称[/]
 *              databaseName    数据库名称[/]
 *          select                      默认的选择函数
 *              参数名称
 *              obj             查询的内容，结构如下（假设表中字段有(name,age,sex)）
 *                  {
 *                      conditionStr :  "age=1 and sex=male",   [/]
 *                      condition   :   {   // 该情况等同于上面的表达式(这里多个情况都用and连接)  [/]
 *                                          age : {         //比对的字段 age
 *                                              sig : "=“，  //比对的方法 =
 *                                              value : "1" //比对的值 1
 *                                          },
 *                                          sex : {
 *                                              sig : "=",
 *                                              value : "male"
 *                                          }
 *                                      },
 *                      cols        :   ['name']  //这里表示将查询的字段
 *                  } => select name from tableName where age=1 and sex=male
 *              callback        回调函数，由用户编写
 *                  其中 callback 的格式为 function(results) { dear with result }
 *                  results 为执行 query 操作后的结果(是一个数组)
 *              tableName       数据表名称[/]
 *              databaseName    数据库名称[/]
 *          update                      默认的更新函数
 *              参数名称
 *              obj             查询的内容，结构如下（假设表中字段有(name,age,sex)）
 *                  {
 *                      conditionStr :  "age=1 and sex=male",
 *                      condition   :   {   // 该情况等同于上面的表达式(这里多个情况都用and连接)
 *                                          age : {         //比对的字段 age
 *                                              sig : "=“，  //比对的方法 =
 *                                              value : "1" //比对的值 1
 *                                          },
 *                                          sex : {
 *                                              sig : "=",
 *                                              value : "male"
 *                                          }
 *                                      },
 *                       setStr : "name='lala'",
 *                       set : {
 *                                  "name" : "lala"
 *                              }
 *                  } => update tableName set name=lala where age=1 and sex=male
 *              callback        回调函数，由用户编写
 *                  其中 callback 的格式为 function(results) { dear with result }
 *                  results 为执行 query 操作后的结果
 *              tableName       数据表名称[/]
 *              databaseName    数据库名称[/]
 *          delete                      默认的删除函数
 *              参数名称
 *              obj             查询的内容，结构如下（假设表中字段有(name,age,sex)）
 *                  {
 *                      conditionStr :  "age=1 and sex=male",
 *                      condition   :   {   // 该情况等同于上面的表达式(这里多个情况都用and连接)
 *                                          age : {         //比对的字段 age
 *                                              sig : "=“，  //比对的方法 =
 *                                              value : "1" //比对的值 1
 *                                          },
 *                                          sex : {
 *                                              sig : "=",
 *                                              value : "male"
 *                                          }
 *                                      }
 *                  } => delete from tableName where age=1 and sex=male
 *              callback        回调函数，由用户编写
 *                  其中 callback 的格式为 function(results) { dear with result }
 *                  results 为执行 query 操作后的结果
 *              tableName       数据表名称[/]
 *              databaseName    数据库名称[/]
 * */

/**
 * 关于事务 (executeTransactioin) 函数，这里默认使用的数据库为 methods 中指定的 tableName_
 * */

/**
 * 关于使用扩展方法，这里给一定的指南
 * var mysqlPool = require("./packMysqlPoolV.js").packageMysqlPoolV;
 * mysqlPool.init({...});
 *
 * var oDBService = mysqlPool.method;
 * //这里有四个默认可能会出现的参数，分别为
 * //传入参数[^]，回调函数[^]，表名[*]，数据库名称[*]
 * //其中[^]为推荐存在的，[*]则是按情况推荐使用
 * //由于这里无法使用返回值，所以只能使用回调
 * oDBService.method.extFnOne = function(inParam,callback,tableName,databaseName) {
 *      //以下仅仅[^]标记处需要进行自行编写
 *      //修正默认处理函数，因为回调中会失效
 *      var defaultDear = this.defaultDear; //[*]这里仅仅需要时才要编写
 *      //获取连接
 *      this.defaultGetOneConnection(function(connection,tableName){
 *          connection.query(".....[^]",function(err,results) {
 *              //[^]
 *              defaultDear(err,results,callback);  //[*]这里已经在上方定义了该函数
 *          });
 *      },tableName,databaseName);
 * };
 * */

/**
 * 请不要在多个文件中使用到给文件，因为每次都新建一个连接池
 * */

var mysql = require('mysql');
var async = require("async");

var sqlpool = (function(){
    var //defaultConnectionParam = connectionParam,
        //{     这里举个栗子
        //    host: 'localhost',
        //    user: 'root',
        //    password: 'ibas0742'
        //},
        pool;

    var init_ = function(connectionParam,databaseName_,tableName_) {
        if (connectionParam) {} else {
            throw new Error("connectionParam is not available .");
        }
        pool = mysql.createPool(connectionParam);
        if (databaseName_) {
            methods.databaseName_ = databaseName_;
        }
        if (tableName_) {
            methods.tableName_ = tableName_;
        }
        init_ = function(){
            console.log("init have been call more than once .");
        };
    };

    var methods = {
        databaseName_ : null,
        tableName_ : null,
        defaultDear : function(err,results,cb) {
            // if (err) {
            //     throw err;
            //     return {};
            // } else {
            //     cb(results);
            // }
            cb(err,results);
        },
        defaultGetOneConnection : function(cb,tableName,databaseName) {
            if (!databaseName) {
                databaseName = this.databaseName_;
            }
            if (!tableName) {
                tableName = this.tableName_;
            }
            if (tableName && databaseName) {} else {
                throw new Error("databaseName or tableName is not available .");
            }
            pool.getConnection(function(err,connection){
                if (err) {
                    throw err;
                    return {};
                } else {
                    connection.query("use " + databaseName);
                    cb(connection,tableName);
                }
                connection.release();
            });
        },
        setDefaultDatabaseName : function(databaseName__) {
            if (databaseName__) {
                this.databaseName_ = databaseName__;
            }
        },
        setDefaultTableName : function(tableName__) {
            if (tableName__) {
                this.tableName_ = tableName__;
            }
        },
        executeTransaction : function(sqlArr,callback,databaseName) {
            //判断即将执行的sql语句是否为空
            if (sqlArr.length <= 0) {
                callback(err,null);
                console.error("sqlArr length is less than one .");
                return;
            }
            if (!databaseName) {
                databaseName = this.databaseName_;
            }
            if (!databaseName) {
                throw new Error("未设定数据库字段");
            }
            //获取一个连接
            pool.getConnection(function(err,connection_){
                if (err) {
                    console.err(err.body);
                    //throw err;
                    callback(err,null);
                } else {
                    //开始开启事务
                    connection_.query("use " + databaseName);
                    connection_.beginTransaction(function(err) {
                        var sqlFn = [];
                        var results = [];
                        //将事务开始压栈
                        sqlArr.forEach(function(sqlStr){
                            //定义事务执行的回调
                            var tmp = function(callback_) {
                                connection_.query(sqlStr,function(err,result) {
                                    if (err) {
                                        connection_.rollback(function(){
                                            console.warn(sqlStr + " 事务失败");
                                            throw err;
                                        });
                                    } else {
                                        results.push(result);
                                        return callback_(null,'ok');
                                    }
                                });
                            };
                            sqlFn.push(tmp);
                        });
                        //开始批量异步执行事务
                        async.series(sqlFn,function(err,result){
                            if (err) {
                                //console.log("事务执行发生错误" + err);
                                connection_.rollback(function(err) {
                                    connection_.error("事务执行发生错误" + err);
                                    connection_.release();
                                    return callback(err,null);
                                });
                            } else {
                                connection_.commit(function(err,info){
                                    if (err) {
                                        connection_.rollback(function(err) {
                                            console.warn("事务执行发生错误" + err);
                                            connection_.release();
                                            return callback(err,null);
                                        })
                                    } else {
                                        connection_.release();
                                        return callback(null,results);
                                    }
                                });
                            }
                        });
                        //end async
                    });
                }
            });
        },
        getAll : function(callback,tableName,databaseName) {
            var defaultDear = this.defaultDear;
            this.defaultGetOneConnection(function(connection,tableName){
                connection.query("select * from " + tableName,function(err,results){
                    defaultDear(err,results,callback);
                });
            },tableName,databaseName);
        },
        insert : function(obj,callback,tableName,databaseName) {
            var defaultDear = this.defaultDear;
            this.defaultGetOneConnection(function(connection,tableName){
                connection.query("insert into " + tableName + " set ?",obj,function(err,results){
                    defaultDear(err,results,callback)
                });
            },tableName,databaseName);
        },
        select : function(obj,callback,tableName,databaseName) {
            var defaultDear = this.defaultDear;
            this.defaultGetOneConnection(function(connection,tableName) {
                var sqle = "";
                if (obj.conditionStr) {
                    sqle = "where " + obj.conditionStr;
                }
                else if (obj.condition) {
                    var isF = true;
                    sqle = "where";
                    for (var i in obj.condition) {
                        if (isF) {} else {
                            sqle += " and";
                        }
                        sqle += " " + i + obj.condition[i]["sig"] + mysql.escape(obj.condition[i]["value"]);
                    }
                }
                if (obj.cols) {
                    connection.query("select ?? from ?? " + sqle,[obj.cols,tableName],function(err,results){
                        defaultDear(err,results,callback)
                    });
                } else {
                    connection.query("select * from ?? " + sqle,[tableName],function(err,results){
                        defaultDear(err,results,callback)
                    });
                }
            },tableName,databaseName);
        },
        delete : function(obj,callback,tableName,databaseName) {
            var defaultDear = this.defaultDear;
            this.defaultGetOneConnection(function(connection,tableName) {
                var sqle = "";
                if (obj.conditionStr) {
                    sqle = " where " + obj.conditionStr;
                }
                else if (obj.condition) {
                    var isF = true;
                    sqle = " where";
                    for (var i in obj.condition) {
                        if (isF) {} else {
                            sqle += " and";
                        }
                        sqle += " " + i + obj.condition[i]["sig"] + obj.condition["value"];
                    }
                } else {
                    throw new Error("condition is required .");
                }
                connection.query("delete from " + tableName + sqle,function(err,results){
                    defaultDear(err,results,callback)
                });
            },tableName,databaseName);
        },
        update : function(obj,callback,tableName,databaseName) {
            var defaultDear = this.defaultDear;
            this.defaultGetOneConnection(function(connection,tableName) {
                var sqle = "";
                var set_ = "";
                if (obj.conditionStr) {
                    sqle = " where " + obj.conditionStr;
                }
                else if (obj.condition) {
                    var isF = true;
                    sqle = " where";
                    for (var i in obj.condition) {
                        if (isF) {isF = false;} else {
                            sqle += " and";
                        }
                        sqle += " " + i + obj.condition[i]["sig"] + obj.condition["value"];
                    }
                } else {
                    throw new Error("condition is required .");
                }
                if (obj.setStr) {
                    set_ = " " + obj.setStr + " ";
                }
                else if (obj.set) {
                    var isF = true;
                    for (var i in obj.set) {
                        if (isF) {isF = false;} else {
                            sqle += " , ";
                        }
                        set_ += i + " ='" + obj.set[i] + "' ";
                    }
                } else {
                    throw new Error("set is required .");
                }
                connection.query("update " + tableName + " set " + set_ + sqle,function(err,results){
                    defaultDear(err,results,callback || function(){})
                });
            },tableName,databaseName);
        }
    };

    //init_();

    return {
        init : init_,
        methods : methods
    }
})();

module.exports.sqlpool = sqlpool;

/**
 *
 * createPool 的参数如下
 connectionLimit : 10,
 host            : 'example.org',
 user            : 'bob',
 password        : 'secret',
 database        : 'my_db'
 * */

